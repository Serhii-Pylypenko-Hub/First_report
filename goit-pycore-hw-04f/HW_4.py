# –ó–∞–≤–¥–∞–Ω–Ω—è 1

def total_salary(path):
    try:
        with open(path, "r", encoding="utf-8") as file:
            total = 0
            count = 0
            for line in file:
                line = line.strip()
                if not line:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
                try:
                    _, salary = line.split(",")
                    total += int(salary)
                    count += 1
                except ValueError:
                    print(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä—è–¥–æ–∫: {line}")
            if count == 0:
                return (0, 0)
            average = total // count
            return (total, average)
    except FileNotFoundError:
        print(f"–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {path}")
        return (0, 0)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É: {e}")
        return (0, 0)

total, average = total_salary("D:\Projects\First_report\goit-pycore-hw-04\Salary.txt")
print(f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞—Ä–æ–±—ñ—Ç–Ω–æ—ó –ø–ª–∞—Ç–∏: {total}, –°–µ—Ä–µ–¥–Ω—è –∑–∞—Ä–æ–±—ñ—Ç–Ω–∞ –ø–ª–∞—Ç–∞: {average}")

# –ó–∞–≤–¥–∞–Ω–Ω—è 2

def get_cats_info(path):
    cats = []
    try:
        with open(path, "r", encoding="utf-8") as file:
            for line in file:
                parts = line.strip().split(",")
                if len(parts) == 3:
                    cat_id, name, age = parts
                    cats.append({
                        "id": cat_id,
                        "name": name,
                        "age": age
                    })
                else:
                    print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä—è–¥–æ–∫: {line.strip()}")
        return cats
    except FileNotFoundError:
        print(f"–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {path}")
        return []
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")
        return []

cats_info = get_cats_info("D:\Projects\First_report\goit-pycore-hw-04\Cat.txt")
print(cats_info)



# –ó–∞–≤–¥–∞–Ω–Ω—è 3

import sys
from pathlib import Path
from colorama import init, Fore, Style

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è colorama
init(autoreset=True)

def print_directory_tree(path: Path, prefix: str = ""):
    try:
        for item in sorted(path.iterdir()):
            if item.is_dir():
                print(f"{prefix}{Fore.BLUE}{item.name}/")
                print_directory_tree(item, prefix + "    ")
            else:
                print(f"{prefix}{Fore.GREEN}{item.name}")
    except PermissionError:
        print(f"{prefix}{Fore.RED}[Permission denied]")

def main():
    if len(sys.argv) < 2:
        print(f"{Fore.RED}‚ùóÔ∏è –í–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞.")
        return

    dir_path = Path(sys.argv[1])

    if not dir_path.exists():
        print(f"{Fore.RED}‚ùóÔ∏è –®–ª—è—Ö –Ω–µ —ñ—Å–Ω—É—î: {dir_path}")
        return

    if not dir_path.is_dir():
        print(f"{Fore.RED}‚ùóÔ∏è –¶–µ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {dir_path}")
        return

    print(f"{Fore.YELLOW}üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {dir_path}\n")
    print_directory_tree(dir_path)

if __name__ == "__main__":
    main()



# –ó–∞–≤–¥–∞–Ω–Ω—è 4

def parse_input(user_input):
    cmd, *args = user_input.strip().split()
    return cmd.lower(), args


def add_contact(args, contacts):
    if len(args) != 2:
        return "‚ùó Please use: add <name> <phone>"

    name, phone = args
    if not phone.isdigit():
        return "‚ùó Phone number must contain only digits."

    contacts[name] = phone
    return f"‚úÖ Contact '{name}' added."


def show_all(contacts):
    if not contacts:
        return "üì≠ No contacts saved yet."
    return "\n".join([f"{name}: {phone}" for name, phone in contacts.items()])


def main():
    contacts = {}
    print("üëã Welcome to the assistant bot!")
    while True:
        user_input = input("üìù Enter a command: ")
        command, args = parse_input(user_input)

        if command in ["close", "exit"]:
            print("üëã Good bye!")
            break
        elif command == "hello":
            print("ü§ñ How can I help you?")
        elif command == "add":
            print(add_contact(args, contacts))
        elif command == "all":
            print(show_all(contacts))
        else:
            print("‚ö†Ô∏è Invalid command. Please try again.")


if __name__ == "__main__":
    main()


         



