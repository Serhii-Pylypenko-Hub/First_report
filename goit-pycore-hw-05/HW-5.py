# Task1

def caching_fibonacci():
    cache = {}
    def fibonacci(n):
        if n in cache:
            return cache[n]
        if n == 0:
            cache[0] = 0
        elif n == 1:
            cache[1] = 1
        else:
            cache[n] = fibonacci(n - 1) + fibonacci(n - 2)
        return cache[n]
    attempts = 5 
    while attempts > 0:
        user_input = input("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ –Ω–µ–≤—ñ–¥‚Äô—î–º–Ω–µ —á–∏—Å–ª–æ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –§—ñ–±–æ–Ω–∞—á—á—ñ: ")

        if not user_input.isdigit():
            attempts -= 1
            print(f" –ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º –Ω–µ–≤—ñ–¥‚Äô—î–º–Ω–∏–º —á–∏—Å–ª–æ–º. –ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: {attempts}")
            continue
        n = int(user_input)
        try:
            result = fibonacci(n)
            print(f" {n}-—Ç–µ —á–∏—Å–ª–æ –§—ñ–±–æ–Ω–∞—á—á—ñ: {result}")
            return  # —É—Å–ø—ñ—à–Ω–æ ‚Äî –≤–∏—Ö–æ–¥–∏–º–æ
        except RecursionError:
            print(" –ü–æ–º–∏–ª–∫–∞: –∑–∞–±–∞–≥–∞—Ç–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤ (—á–∏—Å–ª–æ –Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ).")
            return
        except Exception as e:
            print(f" –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            return
    print(" –í–∏—á–µ—Ä–ø–∞–Ω–æ –≤—Å—ñ —Å–ø—Ä–æ–±–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# caching_fibonacci()

# Task2
      
import re
from typing import Callable, Generator

def generator_numbers(text: str) -> Generator[float, None, None]:

    try:
        # –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å—ñ –¥—ñ–π—Å–Ω—ñ —á–∏—Å–ª–∞, –≤—ñ–¥–æ–∫—Ä–µ–º–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–∞–º–∏
        for match in re.findall(r'\b\d+\.\d+\b', text):
            yield float(match)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ generator_numbers: {e}")


def sum_profit(text: str, func: Callable[[str], Generator[float, None, None]]) -> float:
    try:
        return sum(func(text))
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ sum_profit: {e}")
        return 0.0


text = "–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –¥–µ–∫—ñ–ª—å–∫–æ—Ö —á–∞—Å—Ç–∏–Ω: 1000.01 —è–∫ –æ—Å–Ω–æ–≤–Ω–∏–π –¥–æ—Ö—ñ–¥, –¥–æ–ø–æ–≤–Ω–µ–Ω–∏–π –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è–º–∏ 27.45 —ñ 324.00 –¥–æ–ª–∞—Ä—ñ–≤."
total_income = sum_profit(text, generator_numbers)
print(f"–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥: {total_income}")



# Task4
def input_error(func):
    def inner(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except KeyError:
            return "‚ùó Contact not found."
        except ValueError:
            return "‚ùó Give me name and phone please."
        except IndexError:
            return "‚ùó Enter user name."
    return inner


def parse_input(user_input):
    cmd, *args = user_input.strip().split()
    return cmd.lower(), args


@input_error
def add_contact(args, contacts):
    name, phone = args
    if not phone.isdigit():
        raise ValueError
    contacts[name] = phone
    return f"‚úÖ Contact '{name}' added."


@input_error
def show_phone(args, contacts):
    name = args[0]
    return f"{name}: {contacts[name]}"


@input_error
def show_all(contacts):
    if not contacts:
        return "üì≠ No contacts saved yet."
    return "\n".join([f"{name}: {phone}" for name, phone in contacts.items()])


def main():
    contacts = {}
    print("üëã Welcome to the assistant bot!")

    while True:
        user_input = input("üìù Enter a command: ")
        command, args = parse_input(user_input)

        if command in ["close", "exit"]:
            print("üëã Good bye!")
            break
        elif command == "hello":
            print("ü§ñ How can I help you?")
        elif command == "add":
            print(add_contact(args, contacts))
        elif command == "phone":
            print(show_phone(args, contacts))
        elif command == "all":
            print(show_all(contacts))
        else:
            print("‚ö†Ô∏è Invalid command. Please try again.")


if __name__ == "__main__":
    main()
      



